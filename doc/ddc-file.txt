*ddc-fie.txt*		   Powerful and Performant File Completion for ddc.vim

Author : Luma <world@luma.email>
License: MIT <https://github.com/LumaKernel/ddc-file/blob/main/LICENSE>


==============================================================================
CONTENTS						   *ddc-file-contents*

INTRODUCTION					       |ddc-file-introduction|
INSTALL							    |ddc-file-install|
EXAMPLES						   |ddc-file-examples|
PARAMS							     |ddc-file-params|

==============================================================================
INTRODUCTION					       *ddc-file-introduction*

This source collects candidates from file paths under the (1) buffer relative,
(2) cwd relative, (3) project root (.git/, etc...; configurable by
|ddc-file-param-projMarkers|) relative.

==============================================================================
INSTALL							    *ddc-file-install*

Please install both "ddc.vim" and "denops.vim".

https://github.com/Shougo/ddc.vim
https://github.com/vim-denops/denops.vim

==============================================================================
EXAMPLES						   *ddc-file-examples*
>
	call ddc#custom#patch_global('sources', ['file'])
	call ddc#custom#patch_global('sourceOptions', {
	    \ 'file': {
	    \   'mark': 'F',
	    \   'isVolatile': v:true,
	    \ }})
	call ddc#custom#patch_filetype(
	    \ ['ps1', 'dosbatch', 'autohotkey', 'registry'],
	    \ 'sourceParams', {
	    \   'file': {
	    \     'mode': 'win32',
	    \   },
	    \ })
<

==============================================================================
PARAMS							     *ddc-file-params*

							 *ddc-file-param-mode*
mode		("os" | "win32" | "posix")
		Controls path resolving and path separator. "os" will use the
		current OS native mode.

		Default: "posix"

						  *ddc-file-param-takeFileNum*
takeFileNum	(number)
		Limit number of files to filter at very first timing, namely
		before filtering. It is useful if there are too many 'a...'
		files when filtering with 'z'.

		Default: 10000

						  *ddc-file-param-projMarkers*
projMarkers	(string[])
		File or directory names to search for project-root. Don't
		include ending slashes. Used for exact match.

		Default: [
		    ".git",
		    ".vscode",
		    ".github",
		]

					     *ddc-file-param-cwdMaxCandidates*
cwdMaxCandidates	(number)
		Max candidates number for cwd relative.

		Default: 1000

					     *ddc-file-param-bufMaxCandidates*
bufMaxCandidates	(number)
		Max candidates number for buffer relative.

		Default: 1000

				     *ddc-file-param-projFromCwdMaxCandidates*
projFromCwdMaxCandidates	(number[])
		Max candidates number for project-root relative found by cwd.
		n-th number is used for n-th recursively found project-root.

		e.g. Consider following situation.
		  my-project/
		  |- .git/
		  |- sub-project/
		     |- .git/
		     |- src/  <-- cwd
		        |- my-document.txt
		If [10] is set, sub-project/ is only found with up to 10 files.
		If [10, 5] is set, sub-project/ is found with up to 10 files
		and my-project is also found with up to 5 files.

		Default: [1000]

				     *ddc-file-param-projFromBufMaxCandidates*
projFromBufMaxCandidates	(number[])
		Project-root from buffer relative version of
		|ddc-file-params-projFromCwdMaxCandidates|.

		Default: [1000]

						   *ddc-file-params-cwdIsRoot*
cwdIsRoot	(boolean)
		Set to true to complete from cwd even if the input is absolute
		path. e.g. the input is '/REA', and there is
		<cwd>/README.md, it will be completed as well.

		Default: false

						   *ddc-file-params-bufIsRoot*
bufIsRoot	(boolean)
		Buffer relative version of |ddc-file-params-cwdIsRoot|.

		Default: false

						  *ddc-file-params-projIsRoot*
projIsRoot	(boolean)
		Project-root relative version of |ddc-file-params-cwdIsRoot|.

		Default: true

==============================================================================
vim:tw=78:ts=8:noet:ft=help:norl
